#!/bin/bash

# kurbeScript - Kubernetes Local Cluster Setup Script
# This script installs Minikube, kubectl, and sets up a local Kubernetes cluster

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to detect OS
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [ -f /etc/debian_version ]; then
            echo "debian"
        elif [ -f /etc/redhat-release ]; then
            echo "redhat"
        else
            echo "linux"
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

# Function to install kubectl
install_kubectl() {
    log_info "Installing kubectl..."
    
    OS=$(detect_os)
    
    case $OS in
        "debian")
            # Install kubectl on Debian/Ubuntu
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl
            curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
            echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubectl
            ;;
        "redhat")
            # Install kubectl on RHEL/CentOS/Fedora
            cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
            sudo yum install -y kubectl
            ;;
        "macos")
            # Install kubectl on macOS
            if command_exists brew; then
                brew install kubectl
            else
                log_warning "Homebrew not found. Installing kubectl manually..."
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl"
                chmod +x kubectl
                sudo mv kubectl /usr/local/bin/
            fi
            ;;
        *)
            # Generic installation
            log_info "Installing kubectl using curl method..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            ;;
    esac
    
    log_success "kubectl installed successfully"
}

# Function to install Minikube
install_minikube() {
    log_info "Installing Minikube..."
    
    OS=$(detect_os)
    
    case $OS in
        "debian"|"linux")
            # Install Minikube on Linux
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            sudo install minikube-linux-amd64 /usr/local/bin/minikube
            rm minikube-linux-amd64
            ;;
        "macos")
            # Install Minikube on macOS
            if command_exists brew; then
                brew install minikube
            else
                log_warning "Homebrew not found. Installing Minikube manually..."
                curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64
                sudo install minikube-darwin-amd64 /usr/local/bin/minikube
                rm minikube-darwin-amd64
            fi
            ;;
        "windows")
            log_error "Please install Minikube manually on Windows from: https://minikube.sigs.k8s.io/docs/start/"
            exit 1
            ;;
        *)
            log_error "Unsupported OS for automatic Minikube installation"
            exit 1
            ;;
    esac
    
    log_success "Minikube installed successfully"
}

# Function to check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check if running as root (not recommended for Minikube)
    if [ "$EUID" -eq 0 ]; then
        log_warning "Running as root. Minikube should not be run as root user."
        log_info "Consider running this script as a non-root user."
    fi
    
    # Check for virtualization support
    if [[ $(detect_os) == "linux" ]]; then
        if grep -q "vmx\|svm" /proc/cpuinfo; then
            log_success "Virtualization support detected"
        else
            log_warning "Virtualization support not detected. Minikube may not work properly."
        fi
    fi
    
    # Check available memory
    if [[ $(detect_os) == "linux" ]]; then
        MEMORY_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
        MEMORY_GB=$((MEMORY_KB / 1024 / 1024))
        if [ $MEMORY_GB -lt 2 ]; then
            log_warning "Less than 2GB RAM available. Minikube requires at least 2GB."
        else
            log_success "Sufficient memory available: ${MEMORY_GB}GB"
        fi
    fi
}

# Function to install Docker (if not present)
install_docker() {
    if ! command_exists docker; then
        log_info "Docker not found. Installing Docker..."
        
        OS=$(detect_os)
        case $OS in
            "debian")
                # Install Docker on Debian/Ubuntu
                sudo apt-get update
                sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                sudo usermod -aG docker $USER
                ;;
            "macos")
                log_warning "Please install Docker Desktop for Mac from: https://docs.docker.com/desktop/mac/install/"
                ;;
            *)
                log_warning "Please install Docker manually for your system"
                ;;
        esac
        
        log_success "Docker installation completed"
        log_warning "You may need to log out and back in for Docker group membership to take effect"
    else
        log_success "Docker is already installed"
    fi
}

# Main installation function
main() {
    log_info "Starting Kubernetes local cluster setup..."
    
    # Check prerequisites
    check_prerequisites
    
    # Install kubectl if not present
    if ! command_exists kubectl; then
        install_kubectl
    else
        log_success "kubectl is already installed"
        kubectl version --client
    fi
    
    # Install Docker if not present
    install_docker
    
    # Install Minikube if not present
    if ! command_exists minikube; then
        install_minikube
    else
        log_success "Minikube is already installed"
        minikube version
    fi
    
    # Start Minikube cluster
    log_info "Starting Minikube cluster..."
    
    # Check if cluster is already running
    if minikube status >/dev/null 2>&1; then
        log_info "Minikube cluster is already running"
    else
        log_info "Starting new Minikube cluster..."
        minikube start --driver=docker --memory=2048 --cpus=2
        
        # Wait for cluster to be ready
        log_info "Waiting for cluster to be ready..."
        kubectl wait --for=condition=Ready nodes --all --timeout=300s
    fi
    
    log_success "Minikube cluster started successfully!"
    
    # Verify cluster is running
    log_info "Verifying cluster status..."
    echo "=== Cluster Info ==="
    kubectl cluster-info
    
    echo ""
    echo "=== Node Status ==="
    kubectl get nodes
    
    echo ""
    echo "=== Available Pods ==="
    kubectl get pods --all-namespaces
    
    echo ""
    echo "=== Minikube Status ==="
    minikube status
    
    log_success "Kubernetes cluster setup completed successfully!"
    
    # Provide next steps
    echo ""
    log_info "Next steps:"
    echo "1. Use 'kubectl get pods' to list pods in default namespace"
    echo "2. Use 'kubectl get pods --all-namespaces' to list all pods"
    echo "3. Use 'minikube dashboard' to open Kubernetes dashboard"
    echo "4. Use 'minikube stop' to stop the cluster"
    echo "5. Use 'minikube delete' to delete the cluster"
    echo ""
    echo "Example commands to try:"
    echo "  kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4"
    echo "  kubectl expose deployment hello-minikube --type=NodePort --port=8080"
    echo "  minikube service hello-minikube"
}

# Cleanup function
cleanup() {
    log_info "Cleaning up temporary files..."
    # Add any cleanup tasks here if needed
}

# Trap to ensure cleanup on exit
trap cleanup EXIT

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
